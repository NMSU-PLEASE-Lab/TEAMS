// Generated from TEAMS.g by ANTLR 4.2.2

package teams;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class TEAMSLexer extends Lexer {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__31=1, T__30=2, T__29=3, T__28=4, T__27=5, T__26=6, T__25=7, T__24=8, 
		T__23=9, T__22=10, T__21=11, T__20=12, T__19=13, T__18=14, T__17=15, T__16=16, 
		T__15=17, T__14=18, T__13=19, T__12=20, T__11=21, T__10=22, T__9=23, T__8=24, 
		T__7=25, T__6=26, T__5=27, T__4=28, T__3=29, T__2=30, T__1=31, T__0=32, 
		SPACE=33, INT=34, Identifier=35, RegExp=36, WS=37;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"<INVALID>",
		"'long'", "'short'", "','", "'*'", "'withincode'", "'('", "':'", "'int'", 
		"'before'", "'{'", "'double'", "'boolean'", "'}'", "'aspect'", "'float'", 
		"'after'", "'fieldAccess'", "'char'", "'byte'", "'loop'", "'.'", "')'", 
		"'yourDesignator'", "'requires'", "';'", "'within'", "'&&'", "'call'", 
		"'pointcut '", "'execution'", "'basicblock'", "'!'", "SPACE", "INT", "Identifier", 
		"RegExp", "WS"
	};
	public static final String[] ruleNames = {
		"T__31", "T__30", "T__29", "T__28", "T__27", "T__26", "T__25", "T__24", 
		"T__23", "T__22", "T__21", "T__20", "T__19", "T__18", "T__17", "T__16", 
		"T__15", "T__14", "T__13", "T__12", "T__11", "T__10", "T__9", "T__8", 
		"T__7", "T__6", "T__5", "T__4", "T__3", "T__2", "T__1", "T__0", "SPACE", 
		"INT", "Identifier", "RegExp", "WS"
	};

	 
	/*
	* An instance of the Aspect class to hold the aspect's data 
	*/
	Aspect myAsp = new Aspect();


	public TEAMSLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "TEAMS.g"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	@Override
	public void action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 36: WS_action((RuleContext)_localctx, actionIndex); break;
		}
	}
	private void WS_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0:  skip();  break;
		}
	}

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\'\u0130\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6"+
		"\3\7\3\7\3\b\3\b\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\13\3\13"+
		"\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16"+
		"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\21"+
		"\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22"+
		"\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\25"+
		"\3\25\3\25\3\25\3\25\3\26\3\26\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30"+
		"\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31"+
		"\3\31\3\31\3\31\3\31\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\34"+
		"\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\36\3\36"+
		"\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3 \3"+
		" \3 \3 \3 \3 \3 \3 \3 \3 \3 \3!\3!\3\"\6\"\u0107\n\"\r\"\16\"\u0108\3"+
		"#\6#\u010c\n#\r#\16#\u010d\3$\6$\u0111\n$\r$\16$\u0112\3$\7$\u0116\n$"+
		"\f$\16$\u0119\13$\5$\u011b\n$\3$\3$\6$\u011f\n$\r$\16$\u0120\3%\5%\u0124"+
		"\n%\3%\3%\5%\u0128\n%\6%\u012a\n%\r%\16%\u012b\3&\3&\3&\2\2\'\3\3\5\4"+
		"\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22"+
		"#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C"+
		"#E$G%I&K\'\3\2\b\4\2&&aa\4\2C\\c|\7\2&&\61;C\\aac|\7\2&&\62;C\\aac|\4"+
		"\2,-AA\5\2\13\f\17\17\"\"\u0138\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2"+
		"\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2"+
		"\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2"+
		"\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2"+
		"\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2"+
		"\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2"+
		"\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\3M\3\2\2\2\5R"+
		"\3\2\2\2\7X\3\2\2\2\tZ\3\2\2\2\13\\\3\2\2\2\rg\3\2\2\2\17i\3\2\2\2\21"+
		"k\3\2\2\2\23o\3\2\2\2\25v\3\2\2\2\27x\3\2\2\2\31\177\3\2\2\2\33\u0087"+
		"\3\2\2\2\35\u0089\3\2\2\2\37\u0090\3\2\2\2!\u0096\3\2\2\2#\u009c\3\2\2"+
		"\2%\u00a8\3\2\2\2\'\u00ad\3\2\2\2)\u00b2\3\2\2\2+\u00b7\3\2\2\2-\u00b9"+
		"\3\2\2\2/\u00bb\3\2\2\2\61\u00ca\3\2\2\2\63\u00d3\3\2\2\2\65\u00d5\3\2"+
		"\2\2\67\u00dc\3\2\2\29\u00df\3\2\2\2;\u00e4\3\2\2\2=\u00ee\3\2\2\2?\u00f8"+
		"\3\2\2\2A\u0103\3\2\2\2C\u0106\3\2\2\2E\u010b\3\2\2\2G\u011a\3\2\2\2I"+
		"\u0123\3\2\2\2K\u012d\3\2\2\2MN\7n\2\2NO\7q\2\2OP\7p\2\2PQ\7i\2\2Q\4\3"+
		"\2\2\2RS\7u\2\2ST\7j\2\2TU\7q\2\2UV\7t\2\2VW\7v\2\2W\6\3\2\2\2XY\7.\2"+
		"\2Y\b\3\2\2\2Z[\7,\2\2[\n\3\2\2\2\\]\7y\2\2]^\7k\2\2^_\7v\2\2_`\7j\2\2"+
		"`a\7k\2\2ab\7p\2\2bc\7e\2\2cd\7q\2\2de\7f\2\2ef\7g\2\2f\f\3\2\2\2gh\7"+
		"*\2\2h\16\3\2\2\2ij\7<\2\2j\20\3\2\2\2kl\7k\2\2lm\7p\2\2mn\7v\2\2n\22"+
		"\3\2\2\2op\7d\2\2pq\7g\2\2qr\7h\2\2rs\7q\2\2st\7t\2\2tu\7g\2\2u\24\3\2"+
		"\2\2vw\7}\2\2w\26\3\2\2\2xy\7f\2\2yz\7q\2\2z{\7w\2\2{|\7d\2\2|}\7n\2\2"+
		"}~\7g\2\2~\30\3\2\2\2\177\u0080\7d\2\2\u0080\u0081\7q\2\2\u0081\u0082"+
		"\7q\2\2\u0082\u0083\7n\2\2\u0083\u0084\7g\2\2\u0084\u0085\7c\2\2\u0085"+
		"\u0086\7p\2\2\u0086\32\3\2\2\2\u0087\u0088\7\177\2\2\u0088\34\3\2\2\2"+
		"\u0089\u008a\7c\2\2\u008a\u008b\7u\2\2\u008b\u008c\7r\2\2\u008c\u008d"+
		"\7g\2\2\u008d\u008e\7e\2\2\u008e\u008f\7v\2\2\u008f\36\3\2\2\2\u0090\u0091"+
		"\7h\2\2\u0091\u0092\7n\2\2\u0092\u0093\7q\2\2\u0093\u0094\7c\2\2\u0094"+
		"\u0095\7v\2\2\u0095 \3\2\2\2\u0096\u0097\7c\2\2\u0097\u0098\7h\2\2\u0098"+
		"\u0099\7v\2\2\u0099\u009a\7g\2\2\u009a\u009b\7t\2\2\u009b\"\3\2\2\2\u009c"+
		"\u009d\7h\2\2\u009d\u009e\7k\2\2\u009e\u009f\7g\2\2\u009f\u00a0\7n\2\2"+
		"\u00a0\u00a1\7f\2\2\u00a1\u00a2\7C\2\2\u00a2\u00a3\7e\2\2\u00a3\u00a4"+
		"\7e\2\2\u00a4\u00a5\7g\2\2\u00a5\u00a6\7u\2\2\u00a6\u00a7\7u\2\2\u00a7"+
		"$\3\2\2\2\u00a8\u00a9\7e\2\2\u00a9\u00aa\7j\2\2\u00aa\u00ab\7c\2\2\u00ab"+
		"\u00ac\7t\2\2\u00ac&\3\2\2\2\u00ad\u00ae\7d\2\2\u00ae\u00af\7{\2\2\u00af"+
		"\u00b0\7v\2\2\u00b0\u00b1\7g\2\2\u00b1(\3\2\2\2\u00b2\u00b3\7n\2\2\u00b3"+
		"\u00b4\7q\2\2\u00b4\u00b5\7q\2\2\u00b5\u00b6\7r\2\2\u00b6*\3\2\2\2\u00b7"+
		"\u00b8\7\60\2\2\u00b8,\3\2\2\2\u00b9\u00ba\7+\2\2\u00ba.\3\2\2\2\u00bb"+
		"\u00bc\7{\2\2\u00bc\u00bd\7q\2\2\u00bd\u00be\7w\2\2\u00be\u00bf\7t\2\2"+
		"\u00bf\u00c0\7F\2\2\u00c0\u00c1\7g\2\2\u00c1\u00c2\7u\2\2\u00c2\u00c3"+
		"\7k\2\2\u00c3\u00c4\7i\2\2\u00c4\u00c5\7p\2\2\u00c5\u00c6\7c\2\2\u00c6"+
		"\u00c7\7v\2\2\u00c7\u00c8\7q\2\2\u00c8\u00c9\7t\2\2\u00c9\60\3\2\2\2\u00ca"+
		"\u00cb\7t\2\2\u00cb\u00cc\7g\2\2\u00cc\u00cd\7s\2\2\u00cd\u00ce\7w\2\2"+
		"\u00ce\u00cf\7k\2\2\u00cf\u00d0\7t\2\2\u00d0\u00d1\7g\2\2\u00d1\u00d2"+
		"\7u\2\2\u00d2\62\3\2\2\2\u00d3\u00d4\7=\2\2\u00d4\64\3\2\2\2\u00d5\u00d6"+
		"\7y\2\2\u00d6\u00d7\7k\2\2\u00d7\u00d8\7v\2\2\u00d8\u00d9\7j\2\2\u00d9"+
		"\u00da\7k\2\2\u00da\u00db\7p\2\2\u00db\66\3\2\2\2\u00dc\u00dd\7(\2\2\u00dd"+
		"\u00de\7(\2\2\u00de8\3\2\2\2\u00df\u00e0\7e\2\2\u00e0\u00e1\7c\2\2\u00e1"+
		"\u00e2\7n\2\2\u00e2\u00e3\7n\2\2\u00e3:\3\2\2\2\u00e4\u00e5\7r\2\2\u00e5"+
		"\u00e6\7q\2\2\u00e6\u00e7\7k\2\2\u00e7\u00e8\7p\2\2\u00e8\u00e9\7v\2\2"+
		"\u00e9\u00ea\7e\2\2\u00ea\u00eb\7w\2\2\u00eb\u00ec\7v\2\2\u00ec\u00ed"+
		"\7\"\2\2\u00ed<\3\2\2\2\u00ee\u00ef\7g\2\2\u00ef\u00f0\7z\2\2\u00f0\u00f1"+
		"\7g\2\2\u00f1\u00f2\7e\2\2\u00f2\u00f3\7w\2\2\u00f3\u00f4\7v\2\2\u00f4"+
		"\u00f5\7k\2\2\u00f5\u00f6\7q\2\2\u00f6\u00f7\7p\2\2\u00f7>\3\2\2\2\u00f8"+
		"\u00f9\7d\2\2\u00f9\u00fa\7c\2\2\u00fa\u00fb\7u\2\2\u00fb\u00fc\7k\2\2"+
		"\u00fc\u00fd\7e\2\2\u00fd\u00fe\7d\2\2\u00fe\u00ff\7n\2\2\u00ff\u0100"+
		"\7q\2\2\u0100\u0101\7e\2\2\u0101\u0102\7m\2\2\u0102@\3\2\2\2\u0103\u0104"+
		"\7#\2\2\u0104B\3\2\2\2\u0105\u0107\7\"\2\2\u0106\u0105\3\2\2\2\u0107\u0108"+
		"\3\2\2\2\u0108\u0106\3\2\2\2\u0108\u0109\3\2\2\2\u0109D\3\2\2\2\u010a"+
		"\u010c\4\62;\2\u010b\u010a\3\2\2\2\u010c\u010d\3\2\2\2\u010d\u010b\3\2"+
		"\2\2\u010d\u010e\3\2\2\2\u010eF\3\2\2\2\u010f\u0111\t\2\2\2\u0110\u010f"+
		"\3\2\2\2\u0111\u0112\3\2\2\2\u0112\u0110\3\2\2\2\u0112\u0113\3\2\2\2\u0113"+
		"\u0117\3\2\2\2\u0114\u0116\4\62;\2\u0115\u0114\3\2\2\2\u0116\u0119\3\2"+
		"\2\2\u0117\u0115\3\2\2\2\u0117\u0118\3\2\2\2\u0118\u011b\3\2\2\2\u0119"+
		"\u0117\3\2\2\2\u011a\u0110\3\2\2\2\u011a\u011b\3\2\2\2\u011b\u011c\3\2"+
		"\2\2\u011c\u011e\t\3\2\2\u011d\u011f\t\4\2\2\u011e\u011d\3\2\2\2\u011f"+
		"\u0120\3\2\2\2\u0120\u011e\3\2\2\2\u0120\u0121\3\2\2\2\u0121H\3\2\2\2"+
		"\u0122\u0124\7,\2\2\u0123\u0122\3\2\2\2\u0123\u0124\3\2\2\2\u0124\u0129"+
		"\3\2\2\2\u0125\u0127\t\5\2\2\u0126\u0128\t\6\2\2\u0127\u0126\3\2\2\2\u0127"+
		"\u0128\3\2\2\2\u0128\u012a\3\2\2\2\u0129\u0125\3\2\2\2\u012a\u012b\3\2"+
		"\2\2\u012b\u0129\3\2\2\2\u012b\u012c\3\2\2\2\u012cJ\3\2\2\2\u012d\u012e"+
		"\t\7\2\2\u012e\u012f\b&\2\2\u012fL\3\2\2\2\f\2\u0108\u010d\u0112\u0117"+
		"\u011a\u0120\u0123\u0127\u012b\3\3&\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}